#####################################################################
# Exports 

export TERM=screen-256color

######################################################################
# Alias style functions 

function rc () {
    exec zsh 
}

function e () {
    exit 
}

# These aren't great since they only deal with 
# one argument. 

function n () {
	nvim $1
}

function nv () {
	nvim $1
}

# Run ps then grep the results
function psg () {
    if [ "$1" ]
    then
        if [ "$2" ]
        then
            echo "You passed too many arguments"
        else
            ps aux | grep -i "$1"
        fi
    else
        echo "You need to pass an argument"
    fi
}

######################################################################
# ll

alias ll="ls -lh"
alias sl="ls -lh"
alias la="ls -lah"
alias l="ls -lh"

######################################################################
# Copy file or dir path to pasteboard

function pwc() {
    if [ -z "$1" ]
    then
        pwd | tr -d '\n' | pbcopy
    else
        initial_string="$(pwd | tr -d '\n')/$1"
        echo $initial_string | tr -d '\n' | pbcopy
    fi
}

# Setup so you don't have to type `cd` to get into a directory 
setopt AUTO_CD
setopt CDABLE_VARS

# Set colors for ls
export CLICOLOR=1
export LS_COLORS='di=1:fi=34:ln=31:pi=5:so=5:bd=5:cd=5:or=31'


######################################################################
# Prmopt stuff

NEWLINE=$'\n'

COLOR_PROMPT='%F{15}'
COLOR_BORDER='%F{248}'
COLOR_BORDER='%F{88}'
COLOR_PRIMARY='%F{253}'
COLOR_SECONDARY='%F{241}'
COLOR_TERTIARY='%F{241}'
COLOR_SEPERATOR='%F{239}'
COLOR_VENV='%F{136}'
COLOR_ERROR='%F{160}'
OFFSET_BORDER="${#COLOR_BORDER}"
OFFSET_PRIMARY="${#COLOR_PRIMARY}"
OFFSET_SECONDARY="${#COLOR_SECONDARY}"
OFFSET_SEPERATOR="${#COLOR_SEPERATOR}"
OFFSET_TERTIARY="${#COLOR_TERTIARY}"
OFFSET_VENV="${#COLOR_VENV}"
OFFSET_ERROR="${#COLOR_ERROR}"

### 

function preexec() {
    timer=$(($(print -P %D{%s%6.})/1000))
}

function prompt_git_branch() {
    BRANCH_NAME=$(git branch --show-current 2> /dev/null)
    if [ $? -eq 0 ]; then
        echo -n " ${COLOR_SEPERATOR}· [$BRANCH_NAME]"
        return $OFFSET_SEPERATOR
    else
        return 0
    fi 
}

function prompt_git_status() {
    NUMBER_OF_CHANGES=$(git status --short 2> /dev/null | wc -l | tr -d " ")
    if [ $NUMBER_OF_CHANGES -ne "0" ]; then 
        echo -n "["
        ### Get Insertions and/or Deletions
        NUMBER_A=$(git diff --shortstat 2> /dev/null | cut -d' ' -f5)
        NUMBER_B=$(git diff --shortstat 2> /dev/null | cut -d' ' -f7)
        if [ -z "$NUMBER_B" ]; then
            echo -n $NUMBER_A  
        else
            echo -n $(($NUMBER_A + $NUMBER_B))
        fi
        echo -n "]"
        return 0
    else 
        return 0
    fi
}

function show_timer() {
  if [ $timer ]; then
    now=$(($(print -P %D{%s%6.})/1000))
    elapsed=$(($now-$timer))
    elapsed_2=$((elapsed/1000))
    seconds_with_decimals=$(echo $elapsed|awk '{printf "%.2f",$0/1000}')
    echo "${COLOR_SECONDARY}${seconds_with_decimals}sec "
    unset timer
    return $OFFSET_SECONDARY
  else
    return 0
  fi

}

function prompt_python_venv() {
    if [ -n "$VIRTUAL_ENV" ]; then 
        echo -n " ${COLOR_SEPERATOR}· ${COLOR_VENV}VENV"
        return $(( $OFFSET_SEPERATOR + $OFFSET_VENV ))
    else
        return 0
    fi
}

function prompt_short_directory() {
    # TODO: Get this to work without deleting/hardcoding the `~` from dirs
    # SHORT_PROMPT=$(dirs | awk -F/ '{ for (i=2;i<NF;i++) { prompt=sprintf ("%s/%.1s", prompt, $i) } prompt=sprintf("%s/%s", prompt, $NF) } END { print prompt }')
    SHORT_PROMPT=$(pwd | awk -F/ '{ for (i=2;i<NF;i++) { prompt=sprintf ("%s/%.1s", prompt, $i) } prompt=sprintf("%s/%s", prompt, $NF) } END { print prompt }')
    echo -n "${COLOR_PRIMARY}$SHORT_PROMPT"
    return ${OFFSET_PRIMARY}
}

function prompt_directory() {
    echo -n "${COLOR_PRIMARY}nexus:$(dirs)"
    return ${OFFSET_PRIMARY}
}



function prompt_clock() {
    AM_PM=$(date +%p) 
    if [[ $AM_PM == "PM" ]]; then
        echo -n " ${COLOR_SEPERATOR}· "
        date +%-I:%Mp
    else 
        echo -n " ${COLOR_SEPERATOR}· "
        date +%-I:%Ma
    fi 
    return $OFFSET_SEPERATOR
}

function prompt_previous_exit_code() {
    if [[ $1 -eq 0 ]]; then
        echo " ${COLOR_SEPERATOR}· OK"
        return $OFFSET_SEPERATOR
    else
        echo " ${COLOR_SEPERATOR}· ${COLOR_ERROR}ERROR: $1"
        return $(( $OFFSET_SEPERATOR + $OFFSET_ERROR ))
    fi 
}

function precmd() {

    PREVIOUS_EXIT_CODE=$?

    P_WIDTH=$(tput cols)

    TOP_LINE="${COLOR_BORDER}╭$(printf '─%.0s' {3..$(tput cols)})╮"
    BOTTOM_LINE="${COLOR_BORDER}╰$(printf '─%.0s' {3..$(tput cols)})╯"

    D_DIRECTORY=$(prompt_directory)
    O_DIRECTORY=$?
    C_DIRECTORY=$(( ${#D_DIRECTORY} - $O_DIRECTORY ))

    D_SHORT_DIRECTORY=$(prompt_short_directory)
    O_SHORT_DIRECTORY=$?
    C_SHORT_DIRECTORY=$(( ${#D_SHORT_DIRECTORY} - $O_SHORT_DIRECTORY ))

    D_CLOCK=$(prompt_clock)
    O_CLOCK=$?
    C_CLOCK=$(( ${#D_CLOCK} - $O_CLOCK ))

    D_PREVIOUS_EXIT_STATUS=$(prompt_previous_exit_code $PREVIOUS_EXIT_CODE)
    O_PREVIOUS_EXIT_STATUS=$?
    C_PREVIOUS_EXIT_STATUS=$(( ${#D_PREVIOUS_EXIT_STATUS} - $O_PREVIOUS_EXIT_STATUS ))

    D_GIT_BRANCH=$(prompt_git_branch)
    O_GIT_BRANCH=$?
    C_GIT_BRANCH=$(( ${#D_GIT_BRANCH} - $O_GIT_BRANCH ))

    D_GIT_STATUS=$(prompt_git_status)
    O_GIT_STATUS=$?
    C_GIT_STATUS=$(( ${#D_GIT_STATUS} - $O_GIT_STATUS ))

    D_VENV=$(prompt_python_venv)
    O_VENV=$?
    C_VENV=$(( ${#D_VENV} - $O_VENV ))

    D_TIMER=$(show_timer)
    O_TIMER=$?
    C_TIMER=$(( ${#D_TIMER} - $O_TIMER ))


    # This is for padding some white space between things...
    D_PADDING=8

    if [[ $P_WIDTH -ge $(( $D_PADDING + $C_DIRECTORY + $C_CLOCK + $C_PREVIOUS_EXIT_STATUS + $C_GIT_BRANCH + $C_GIT_STATUS + $C_VENV + $C_TIMER )) ]]; then  
        D="│ "
        O=0
        D="${D}${D_DIRECTORY}"
        O="$(( $O + ${O_DIRECTORY} ))"
        D="${D}${D_CLOCK}"
        O="$(( $O + ${O_CLOCK} ))"
        D="${D}${D_GIT_BRANCH}"
        O="$(( $O + ${O_GIT_BRANCH} ))"
        D="${D}${D_GIT_STATUS}"
        O="$(( $O + ${O_GIT_STATUS} ))"
        D="${D}${D_PREVIOUS_EXIT_STATUS}"
        O="$(( $O + ${O_PREVIOUS_EXIT_STATUS} ))"
        D="${D}${D_VENV}"
        O="$(( $O + ${O_VENV} ))"
        # Define the final colum here since you need to know the rest of the 
        # prompt first
        FINAL_COLUMN=$(( $(tput cols) - ${#D} + ${O} - ${#D_TIMER} + ${O_TIMER} ))
        D="${D}$(printf ' %.0s' {2..${FINAL_COLUMN}})${COLOR_BORDER}"
        D="${D}$(show_timer)"
        D="${D}${COLOR_BORDER}│"

    elif [[ $P_WIDTH -ge $(( $D_PADDING + $C_DIRECTORY + $C_PREVIOUS_EXIT_STATUS + $C_GIT_BRANCH + $C_GIT_STATUS + $C_VENV + $C_TIMER )) ]]; then  
        D="│ "
        O=0
        D="${D}${D_DIRECTORY}"
        O="$(( $O + ${O_DIRECTORY} ))"
        D="${D}${D_GIT_BRANCH}"
        O="$(( $O + ${O_GIT_BRANCH} ))"
        D="${D}${D_GIT_STATUS}"
        O="$(( $O + ${O_GIT_STATUS} ))"
        D="${D}${D_PREVIOUS_EXIT_STATUS}"
        O="$(( $O + ${O_PREVIOUS_EXIT_STATUS} ))"
        D="${D}${D_VENV}"
        O="$(( $O + ${O_VENV} ))"
        # Define the final colum here since you need to know the rest of the 
        # prompt first
        FINAL_COLUMN=$(( $(tput cols) - ${#D} + ${O} - ${#D_TIMER} + ${O_TIMER} ))
        D="${D}$(printf ' %.0s' {2..${FINAL_COLUMN}})${COLOR_BORDER}"
        D="${D}$(show_timer)"
        D="${D}${COLOR_BORDER}│"

    elif [[ $P_WIDTH -ge $(( $D_PADDING + $C_DIRECTORY + $C_GIT_BRANCH + $C_GIT_STATUS + $C_VENV + $C_TIMER )) ]]; then  
        D="│ "
        O=0
        D="${D}${D_DIRECTORY}"
        O="$(( $O + ${O_DIRECTORY} ))"
        D="${D}${D_GIT_BRANCH}"
        O="$(( $O + ${O_GIT_BRANCH} ))"
        D="${D}${D_GIT_STATUS}"
        O="$(( $O + ${O_GIT_STATUS} ))"
        D="${D}${D_VENV}"
        O="$(( $O + ${O_VENV} ))"
        # Define the final colum here since you need to know the rest of the 
        # prompt first
        FINAL_COLUMN=$(( $(tput cols) - ${#D} + ${O} - ${#D_TIMER} + ${O_TIMER} ))
        D="${D}$(printf ' %.0s' {2..${FINAL_COLUMN}})${COLOR_BORDER}"
        D="${D}$(show_timer)"
        D="${D}${COLOR_BORDER}│"

    elif [[ $P_WIDTH -ge $(( $D_PADDING + $C_DIRECTORY + $C_GIT_BRANCH + $C_GIT_STATUS + $C_VENV )) ]]; then  
        D="│ "
        O=0
        D="${D}${D_DIRECTORY}"
        O="$(( $O + ${O_DIRECTORY} ))"
        D="${D}${D_GIT_BRANCH}"
        O="$(( $O + ${O_GIT_BRANCH} ))"
        D="${D}${D_GIT_STATUS}"
        O="$(( $O + ${O_GIT_STATUS} ))"
        D="${D}${D_VENV}"
        O="$(( $O + ${O_VENV} ))"
        # Define the final colum here since you need to know the rest of the 
        # prompt first
        FINAL_COLUMN=$(( $(tput cols) - ${#D} + ${O} ))
        D="${D}$(printf ' %.0s' {2..${FINAL_COLUMN}})${COLOR_BORDER}"
        D="${D}${COLOR_BORDER}│"

    elif [[ $P_WIDTH -ge $(( $D_PADDING + $C_SHORT_DIRECTORY + $C_GIT_BRANCH + $C_GIT_STATUS + $C_VENV )) ]]; then  
        D="│ "
        O=0
        D="${D}${D_SHORT_DIRECTORY}"
        O="$(( $O + ${O_SHORT_DIRECTORY} ))"
        D="${D}${D_GIT_BRANCH}"
        O="$(( $O + ${O_GIT_BRANCH} ))"
        D="${D}${D_GIT_STATUS}"
        O="$(( $O + ${O_GIT_STATUS} ))"
        D="${D}${D_VENV}"
        O="$(( $O + ${O_VENV} ))"
        # Define the final colum here since you need to know the rest of the 
        # prompt first
        FINAL_COLUMN=$(( $(tput cols) - ${#D} + ${O} ))
        D="${D}$(printf ' %.0s' {2..${FINAL_COLUMN}})${COLOR_BORDER}"
        D="${D}${COLOR_BORDER}│"
    else
        D="│ "
        O=0
        D="${D}${D_SHORT_DIRECTORY}"
        O="$(( $O + ${O_SHORT_DIRECTORY} ))"
        D="${D}${D_VENV}"
        O="$(( $O + ${O_VENV} ))"
        FINAL_COLUMN=$(( $(tput cols) - ${#D} + ${O} ))
        D="${D}$(printf ' %.0s' {2..${FINAL_COLUMN}})${COLOR_BORDER}"
        D="${D}${COLOR_BORDER}│"
    fi

    P=""
    P="${P}${TOP_LINE}"
    P="${P}${NEWLINE}"
    P="${P}${D}"
    P="${P}${NEWLINE}"
    P="${P}${BOTTOM_LINE}"
    P="${P}${NEWLINE}"
    PS1="${P}%f%b$ "


# 
#     if [ $(tput cols) -le 50 ]; then
#         PROMPT="%B"
#         PROMPT="${PROMPT}${COLOR_SEPERATOR}"
#         PROMPT="${PROMPT}┌─ "
#         PROMPT="${PROMPT}${COLOR_BORDER}"
#         PROMPT="${PROMPT}%~"
#         # PROMPT="${PROMPT}$(short_prompt)"
#         # PROMPT="${PROMPT}$(show_git_branch)"
#         # PROMPT="${PROMPT}$(show_git_status)"
#         # PROMPT="${PROMPT}%(?. ${COLOR_SEPERATOR}· ${COLOR3}OK. ${COLOR_SEPERATOR}· ${COLOR4}Error: %?)"
#         # PROMPT="${PROMPT}$(show_python_venv)"
#         # PROMPT="${PROMPT}$(show_timer)"
#         # OFFSET=$(($OFFSET+$?))
#         PROMPT="${PROMPT}${NEWLINE}"
#         PROMPT="${PROMPT}${COLOR_PROMPT}"
#         # PROMPT="${PROMPT}└ "
#         PROMPT="${PROMPT}%(!.#.$) "
#         PROMPT="${PROMPT}%f"
#         PROMPT="${PROMPT}%b"
#     fi

}

