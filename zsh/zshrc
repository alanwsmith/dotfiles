#'#####################################################################
# Exports 

export TERM=screen-256color


######################################################################
# Alias style functions 

function rc () {
    exec zsh 
}

function e () {
    exit 
}

# These aren't great since they only deal with 
# one argument. 

function n () {
	nvim $1
}

function nv () {
	nvim $1
}

# Run ps then grep the results
function psg () {
    if [ "$1" ]
    then
        if [ "$2" ]
        then
            echo "You passed too many arguments"
        else
            ps aux | grep -i "$1"
        fi
    else
        echo "You need to pass an argument"
    fi
}

######################################################################
# ll

alias ll="ls -lh"
alias sl="ls -lh"
alias la="ls -lah"
alias l="ls -lh"

######################################################################
# Copy file or dir path to pasteboard

function pwc() {
    if [ -z "$1" ]
    then
        pwd | tr -d '\n' | pbcopy
    else
        initial_string="$(pwd | tr -d '\n')/$1"
        echo $initial_string | tr -d '\n' | pbcopy
    fi
}

# Setup so you don't have to type `cd` to get into a directory 
setopt AUTO_CD
setopt CDABLE_VARS

# Set colors for ls
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced


######################################################################
# Prmopt stuff

NEWLINE=$'\n'
# COLOR_BORDER='%F{19}'
# COLOR_BORDER='%F{124}'
# COLOR_SEPERATOR='%F{8}'
# COLOR_SEPERATOR='%F{252}'
COLOR3='%F{88}'
COLOR4='%F{160}'
COLOR5='%F{20}'
COLOR6='%F{33}'
# COLOR_SEPERATOR='%F{22}'
COLOR8='%F{130}'

COLOR_PROMPT='%F{15}'
COLOR_BORDER='%F{248}'
COLOR_BORDER='%F{88}'
COLOR_PRIMARY='%F{248}'
COLOR_PRIMARY='%F{15}'
COLOR_SECONDARY='%F{241}'
COLOR_TERTIARY='%F{241}'
COLOR_SEPERATOR='%F{239}'

OFFSET_BORDER="${#COLOR_BORDER}"
OFFSET_PRIMARY="${#COLOR_PRIMARY}"
OFFSET_SECONDARY="${#COLOR_SECONDARY}"
OFFSET_SEPERATOR="${#COLOR_SEPERATOR}"
OFFSET_TERTIARY="${#COLOR_TERTIARY}"

C1OFFSET=7
C2OFFSET=7
C3OFFSET=6
C4OFFSET=7
C5OFFSET=6
C6OFFSET=6
C7OFFSET=6
C8OFFSET=7

OFFSET=0

function preexec() {
    timer=$(($(print -P %D{%s%6.})/1000))
}

function show_git_branch() {
    BRANCH_NAME=$(git branch --show-current 2> /dev/null)
    if [ $? -eq 0 ]; then
        echo -n " ${COLOR_SEPERATOR}· ${COLOR_TERTIARY}[$BRANCH_NAME]"
        return $(($OFFSET_SEPERATOR+$OFFSET_TERTIARY))
    else
        return 0
    fi 
}

function show_git_status() {
    NUMBER_OF_CHANGES=$(git status --short 2> /dev/null | wc -l | tr -d " ")
    if [ $NUMBER_OF_CHANGES -ne "0" ]; then 
        echo -n "${COLOR_TERTIARY}["
        ### Get Insertions and/or Deletions
        NUMBER_A=$(git diff --shortstat 2> /dev/null | cut -d' ' -f5)
        NUMBER_B=$(git diff --shortstat 2> /dev/null | cut -d' ' -f7)
        if [ -z "$NUMBER_B" ]; then
            echo -n $NUMBER_A  
        else
            echo -n $(($NUMBER_A + $NUMBER_B))
        fi
        echo -n "]"
        return $OFFSET_TERTIARY
    else 
        return 0
    fi
}

function show_timer() {
  if [ $timer ]; then
    now=$(($(print -P %D{%s%6.})/1000))
    elapsed=$(($now-$timer))
    elapsed_2=$((elapsed/1000))
    # echo " ${COLOR_SEPERATOR}· ${COLOR_BORDER}${elapsed_2}. sec"
    seconds_with_decimals=$(echo $elapsed|awk '{printf "%.2f",$0/1000}')
    echo " ${COLOR_SEPERATOR}· ${COLOR_SECONDARY}${seconds_with_decimals}sec"
    unset timer
    return $(($OFFSET_SEPERATOR+$OFFSET_SECONDARY))
  else
    return 0
  fi

}

function show_date_time() {
    AM_PM=$(date +%p) 
    if [[ $AM_PM == "PM" ]]; then
        date +%-I:%Mp
    else 
        date +%-I:%Ma
    fi 
}

function show_python_venv() {
    if [ -n "$VIRTUAL_ENV" ]; then 
        echo -n " ${COLOR_SEPERATOR}· ${COLOR_SECONDARY}VENV"
        return $(( $OFFSET_SEPERATOR + $OFFSET_SECONDARY ))
    else
        return 0
    fi
}


function short_prompt() {
        echo $PWD | awk -F/ '{ for (i=2;i<NF;i++) { prompt=sprintf ("%s/%.1s", prompt, $i) } prompt=sprintf("%s/%s", prompt, $NF) } END { print prompt }'
}

function precmd() {
    OFFSET=0

    PROMPT_LINE="" 
    PROMPT_LINE="%B${COLOR_BORDER}╒$(printf '═%.0s' {2..$(tput cols)})${NEWLINE}"

    # The offset is adjusted based off the return value from the funciton calls
    PROMPT=""
    PROMPT="%B"
    OFFSET=$(($OFFSET+2))
    # PROMPT="${PROMPT}${COLOR_SEPERATOR}"
    # OFFSET=$(($OFFSET+$C7OFFSET))
    # PROMPT="${PROMPT}├── "
    # PROMPT="${PROMPT}├ "
    PROMPT="${PROMPT}└ "
    PROMPT="${PROMPT}${COLOR_PRIMARY}"
    OFFSET=$(($OFFSET+$OFFSET_PRIMARY))
    # PROMPT="${PROMPT}nexus:%~"
    PROMPT="${PROMPT}nexus:$(dirs)"
    PROMPT="${PROMPT} ${COLOR_SEPERATOR}· ${COLOR_SECONDARY}$(show_date_time)"

    # PROMPT="${PROMPT}${OFFSET}"
    OFFSET=$(($OFFSET+$OFFSET_SEPERATOR+$OFFSET_SECONDARY))
    # PROMPT="${PROMPT}${OFFSET}"

    PROMPT="${PROMPT}"

    PROMPT="${PROMPT}$(show_git_branch)"
    OFFSET=$(($OFFSET+$?))
    PROMPT="${PROMPT}$(show_git_status)"
    OFFSET=$(($OFFSET+$?))
#     PROMPT="${PROMPT}%(?. ${COLOR_SEPERATOR}· ${COLOR_SECONDARY}OK. ${COLOR_SEPERATOR}· ${COLOR4}Error: %?)"
#     OFFSET=$(($OFFSET+${OFFSET_SEPERATOR}+${OFFSET_SECONDARY}))

    # TODO: Get an offset for this
    PROMPT="${PROMPT}$(show_python_venv)"
    OFFSET=$(($OFFSET+$?))

    PROMPT="${PROMPT}$(show_timer)"
    OFFSET=$(($OFFSET+$?))

    # PROMPT="${PROMPT} "
    # PROMPT="${PROMPT}${COLOR_BORDER} "
    # OFFSET=$(($OFFSET+$C1OFFSET))

    # COUNTER=$(( ${#PROMPT} - $OFFSET + 1))
    # COUNTER=$(( $(tput cols) - ${#PROMPT} - $OFFSET + 1))
    
    # COUNTER=$(( $(tput cols) - ${#PROMPT} + $OFFSET ))
    COUNTER=$(( ${#PROMPT} - $OFFSET ))
    PROMPT_LINE="${COLOR_BORDER}"
#     PROMPT_LINE="${PROMPT_LINE}┌$(printf '─%.0s' {2..$COUNTER})"
    PROMPT_LINE="${PROMPT_LINE}╒$(printf '═%.0s' {2..$COUNTER})"
    PROMPT_LINE="${PROMPT_LINE}${NEWLINE}"

    # PROMPT="${PROMPT}${COUNTER}"
#     PROMPT="${PROMPT}${COLOR_SEPERATOR}"
#     while [ $COUNTER -le $(tput cols) ]
#     do
#         PROMPT="${PROMPT}─"
#         COUNTER=$[$COUNTER+1]
#     done
    # PROMPT="${PROMPT}-${#PROMPT}-$(tput cols)"
    #
    # PROMPT="${PROMPT} - ${COUNTER}"

    PROMPT="${PROMPT}${NEWLINE}"
    PROMPT="${PROMPT}${COLOR_BORDER}"
    # PROMPT="${PROMPT}└ "
    PROMPT="${PROMPT}%f"
    PROMPT="${PROMPT}${COLOR_PROMPT}"
    PROMPT="${PROMPT}%(!.#.$) "
    PROMPT="${PROMPT}%b"
    PROMPT="${PROMPT}%f"

    PROMPT="${PROMPT_LINE}${PROMPT}"



    if [ $(tput cols) -le 50 ]; then
        PROMPT="%B"
        PROMPT="${PROMPT}${COLOR_SEPERATOR}"
        PROMPT="${PROMPT}┌─ "
        PROMPT="${PROMPT}${COLOR_BORDER}"
        PROMPT="${PROMPT}%~"
        # PROMPT="${PROMPT}$(short_prompt)"
        # PROMPT="${PROMPT}$(show_git_branch)"
        # PROMPT="${PROMPT}$(show_git_status)"
        # PROMPT="${PROMPT}%(?. ${COLOR_SEPERATOR}· ${COLOR3}OK. ${COLOR_SEPERATOR}· ${COLOR4}Error: %?)"
        # PROMPT="${PROMPT}$(show_python_venv)"
        # PROMPT="${PROMPT}$(show_timer)"
        # OFFSET=$(($OFFSET+$?))
        PROMPT="${PROMPT}${NEWLINE}"
        PROMPT="${PROMPT}${COLOR_PROMPT}"
        # PROMPT="${PROMPT}└ "
        PROMPT="${PROMPT}%(!.#.$) "
        PROMPT="${PROMPT}%f"
        PROMPT="${PROMPT}%b"
    fi

}

